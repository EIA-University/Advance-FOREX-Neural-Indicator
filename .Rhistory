MyData = read.csv(file="C:\Users\Ricardo\AppData\Roaming\MetaQuotes\Terminal\D0E8209F77C8CF37AD8BF550E51FF075\MQL5\Files\Hola.csv", header=TRUE, sep=";", encoding="UTF-16LE", skipNul=TRUE)
MyData = read.csv(file="C:\\Users\Ricardo\AppData\Roaming\MetaQuotes\Terminal\D0E8209F77C8CF37AD8BF550E51FF075\MQL5\Files\Hola.csv", header=TRUE, sep=";", encoding="UTF-16LE", skipNul=TRUE)
MyData = read.csv(file="C:\\Users\\Ricardo\\AppData\\Roaming\\MetaQuotes\\Terminal\\D0E8209F77C8CF37AD8BF550E51FF075\\MQL5\\Files\\Hola.csv", header=TRUE, sep=";", encoding="UTF-16LE", skipNul=TRUE)
MyData = read.csv(file="C:\\Users\\Ricardo\\AppData\\Roaming\\MetaQuotes\\Terminal\\D0E8209F77C8CF37AD8BF550E51FF075\\MQL5\\Files\\Hola.csv", header=TRUE, sep=";", encoding="UTF-16LE", skipNul=TRUE)
install.packages("readxl")
# General imports
library(readr)
#-----------------------------------------------------------------------------#
# Put your user name between asterisks, please without asterisks, remove them #
#-----------------------------------------------------------------------------#
pathDataset = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/Dataset.csv"
pathModelValues = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/ModelValues.csv"
pathGeneticValues = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/GeneticValues.csv"
#-----------------------------------------------------------------------------#
#                                  end                                        #
#-----------------------------------------------------------------------------#
# Run the file that contain all the functions
source("Functions.R")
# Import data from Metatrader
Data = read.csv(pathDataset, header = TRUE, sep = ";", encoding = "UTF-16LE", skipNul = TRUE)
p = 4 # Number of delays for the AR model
Data = getDataBase(Data, p)
# Run the GA to find the best coefficients for the AR model
coef = getARCoefficients(Data, p)
coef = t(coef)
# Run the Madaline model
X = Data[,2:length(Data[1,])]
yd = cbind(Data[,1])
# NO: Hidden neurons
# NO = ND/(1+p) - Represent the max number of hidden neurons
NO = 10
ND = length(X[,1])
alfa = 0.0001
NIT = 100 # Number of iterations
modelValues = runMadaline(X, yd, p, NO, ND, alfa, NIT)
# Write the data in a .csv
write.csv(modelValues, file = pathModelValues, row.names = FALSE)
write.csv(coef[1:(length(coef)-2)], file = pathGeneticValues, row.names = FALSE)
setwd("~/Analisis de decisiones/Entrega 2/Advance-FOREX-Neural-Indicator")
# General imports
library(readr)
#-----------------------------------------------------------------------------#
# Put your user name between asterisks, please without asterisks, remove them #
#-----------------------------------------------------------------------------#
pathDataset = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/Dataset.csv"
pathModelValues = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/ModelValues.csv"
pathGeneticValues = "C:/Users/* YOUR USER NAME HERE */AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/GeneticValues.csv"
#-----------------------------------------------------------------------------#
#                                  end                                        #
#-----------------------------------------------------------------------------#
# Run the file that contain all the functions
source("Functions.R")
# Import data from Metatrader
Data = read.csv(pathDataset, header = TRUE, sep = ";", encoding = "UTF-16LE", skipNul = TRUE)
p = 4 # Number of delays for the AR model
Data = getDataBase(Data, p)
# Run the GA to find the best coefficients for the AR model
coef = getARCoefficients(Data, p)
coef = t(coef)
# Run the Madaline model
X = Data[,2:length(Data[1,])]
yd = cbind(Data[,1])
# NO: Hidden neurons
# NO = ND/(1+p) - Represent the max number of hidden neurons
NO = 10
ND = length(X[,1])
alfa = 0.0001
NIT = 100 # Number of iterations
modelValues = runMadaline(X, yd, p, NO, ND, alfa, NIT)
# Write the data in a .csv
write.csv(modelValues, file = pathModelValues, row.names = FALSE)
write.csv(coef[1:(length(coef)-2)], file = pathGeneticValues, row.names = FALSE)
# General imports
library(readr)
#-----------------------------------------------------------------------------#
# Put your user name between asterisks, please without asterisks, remove them #
#-----------------------------------------------------------------------------#
pathDataset = "C:/Users/Ricardo/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/Dataset.csv"
pathModelValues = "C:/Users/Ricardo/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/ModelValues.csv"
pathGeneticValues = "C:/Users/Ricardo/AppData/Roaming/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/MQL5/Files/GeneticValues.csv"
#-----------------------------------------------------------------------------#
#                                  end                                        #
#-----------------------------------------------------------------------------#
# Run the file that contain all the functions
source("Functions.R")
# Import data from Metatrader
Data = read.csv(pathDataset, header = TRUE, sep = ";", encoding = "UTF-16LE", skipNul = TRUE)
p = 4 # Number of delays for the AR model
Data = getDataBase(Data, p)
# Run the GA to find the best coefficients for the AR model
coef = getARCoefficients(Data, p)
coef = t(coef)
# Run the Madaline model
X = Data[,2:length(Data[1,])]
yd = cbind(Data[,1])
# NO: Hidden neurons
# NO = ND/(1+p) - Represent the max number of hidden neurons
NO = 10
ND = length(X[,1])
alfa = 0.0001
NIT = 100 # Number of iterations
modelValues = runMadaline(X, yd, p, NO, ND, alfa, NIT)
# Write the data in a .csv
write.csv(modelValues, file = pathModelValues, row.names = FALSE)
write.csv(coef[1:(length(coef)-2)], file = pathGeneticValues, row.names = FALSE)
